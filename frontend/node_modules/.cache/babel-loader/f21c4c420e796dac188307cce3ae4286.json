{"ast":null,"code":"var _jsxFileName = \"/Users/junwookim/Desktop/StudyBot_discord/discord_study_bot/frontend/src/components/TotalUsageChart.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\nimport styled from \"styled-components\";\nconst ChartContainer = styled.div`\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n`;\nfunction TotalUsageChart() {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/v1/total-usage\", {\n      mode: 'cors'\n    }).then(res => res.json()).then(json => setData(json)).catch(err => console.error(err));\n  }, []);\n\n  // デフォルトで降順に返ってくる前提\n  // 上位3つをハイライトにするなどの例（ここでは単に色を変えるだけ）\n  const getBarColor = index => {\n    if (index === 0) return \"gold\";\n    if (index === 1) return \"silver\";\n    if (index === 2) return \"chocolate\"; // bronze\n    return \"#8884d8\";\n  };\n  const chartData = data.map((d, i) => ({\n    channel_id: d.channel_id,\n    duration_hour: d.duration_hour,\n    rank: i + 1\n  }));\n  return /*#__PURE__*/React.createElement(ChartContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    width: 600,\n    height: 300,\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"channel_id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"duration_hour\",\n    fill: \"#8884d8\",\n    label: {\n      position: 'top'\n    },\n    isAnimationActive: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, chartData.map((entry, index) => /*#__PURE__*/React.createElement(\"cell\", {\n    key: `cell-${index}`,\n    fill: getBarColor(index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 15\n    }\n  })))));\n}\nexport default TotalUsageChart;","map":{"version":3,"names":["React","useEffect","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","styled","ChartContainer","div","TotalUsageChart","data","setData","fetch","mode","then","res","json","catch","err","console","error","getBarColor","index","chartData","map","d","i","channel_id","duration_hour","rank","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","width","height","strokeDasharray","dataKey","fill","label","position","isAnimationActive","entry","key"],"sources":["/Users/junwookim/Desktop/StudyBot_discord/discord_study_bot/frontend/src/components/TotalUsageChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip } from \"recharts\";\nimport styled from \"styled-components\";\n\nconst ChartContainer = styled.div`\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n`;\n\nfunction TotalUsageChart() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/v1/total-usage\", {mode: 'cors'})\n      .then((res) => res.json())\n      .then((json) => setData(json))\n      .catch((err) => console.error(err));\n  }, []);\n\n  // デフォルトで降順に返ってくる前提\n  // 上位3つをハイライトにするなどの例（ここでは単に色を変えるだけ）\n  const getBarColor = (index) => {\n    if (index === 0) return \"gold\";\n    if (index === 1) return \"silver\";\n    if (index === 2) return \"chocolate\"; // bronze\n    return \"#8884d8\";\n  };\n\n  const chartData = data.map((d, i) => ({\n    channel_id: d.channel_id,\n    duration_hour: d.duration_hour,\n    rank: i + 1\n  }));\n\n  return (\n    <ChartContainer>\n      <BarChart width={600} height={300} data={chartData}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"channel_id\" />\n        <YAxis />\n        <Tooltip />\n        <Bar\n          dataKey=\"duration_hour\"\n          fill=\"#8884d8\"\n          label={{ position: 'top' }}\n          isAnimationActive={true}\n        >\n          {\n            chartData.map((entry, index) => (\n              <cell key={`cell-${index}`} fill={getBarColor(index)} />\n            ))\n          }\n        </Bar>\n      </BarChart>\n    </ChartContainer>\n  );\n}\n\nexport default TotalUsageChart;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,QAAQ,UAAU;AAC9E,OAAOC,MAAM,MAAM,mBAAmB;AAEtC,MAAMC,cAAc,GAAGD,MAAM,CAACE,GAAG;AACjC;AACA;AACA;AACA;AACA,CAAC;AAED,SAASC,eAAeA,CAAA,EAAG;EACzB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACdc,KAAK,CAAC,0CAA0C,EAAE;MAACC,IAAI,EAAE;IAAM,CAAC,CAAC,CAC9DC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACzBF,IAAI,CAAEE,IAAI,IAAKL,OAAO,CAACK,IAAI,CAAC,CAAC,CAC7BC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CAAC;EACvC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA,MAAMG,WAAW,GAAIC,KAAK,IAAK;IAC7B,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,MAAM;IAC9B,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,QAAQ;IAChC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,WAAW,CAAC,CAAC;IACrC,OAAO,SAAS;EAClB,CAAC;EAED,MAAMC,SAAS,GAAGb,IAAI,CAACc,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM;IACpCC,UAAU,EAAEF,CAAC,CAACE,UAAU;IACxBC,aAAa,EAAEH,CAAC,CAACG,aAAa;IAC9BC,IAAI,EAAEH,CAAC,GAAG;EACZ,CAAC,CAAC,CAAC;EAEH,oBACE7B,KAAA,CAAAiC,aAAA,CAACvB,cAAc;IAAAwB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACbvC,KAAA,CAAAiC,aAAA,CAAC9B,QAAQ;IAACqC,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE,GAAI;IAAC5B,IAAI,EAAEa,SAAU;IAAAQ,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACjDvC,KAAA,CAAAiC,aAAA,CAAC1B,aAAa;IAACmC,eAAe,EAAC,KAAK;IAAAR,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACvCvC,KAAA,CAAAiC,aAAA,CAAC5B,KAAK;IAACsC,OAAO,EAAC,YAAY;IAAAT,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eAC9BvC,KAAA,CAAAiC,aAAA,CAAC3B,KAAK;IAAA4B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACTvC,KAAA,CAAAiC,aAAA,CAACzB,OAAO;IAAA0B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,eACXvC,KAAA,CAAAiC,aAAA,CAAC7B,GAAG;IACFuC,OAAO,EAAC,eAAe;IACvBC,IAAI,EAAC,SAAS;IACdC,KAAK,EAAE;MAAEC,QAAQ,EAAE;IAAM,CAAE;IAC3BC,iBAAiB,EAAE,IAAK;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAGtBb,SAAS,CAACC,GAAG,CAAC,CAACqB,KAAK,EAAEvB,KAAK,kBACzBzB,KAAA,CAAAiC,aAAA;IAAMgB,GAAG,EAAE,QAAQxB,KAAK,EAAG;IAACmB,IAAI,EAAEpB,WAAW,CAACC,KAAK,CAAE;IAAAS,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACxD,CAEA,CACG,CACI,CAAC;AAErB;AAEA,eAAe3B,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}