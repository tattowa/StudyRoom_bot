{"ast":null,"code":"var _jsxFileName = \"/Users/junwookim/Desktop/StudyBot_discord/discord_study_bot/frontend/src/components/WeeklyUsageChart.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\n\n/*\n  API形式:\n  [\n    {\"date\": \"2025-02-22\", \"channel_id\": 12345, \"duration_hour\": 0.5},\n    ...\n  ]\n  → これを {date, channelA, channelB, ...} という形へ加工して積み上げ棒グラフにする\n*/\nfunction WeeklyUsageChart() {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/v1/weekly-usage\").then(res => res.json()).then(json => {\n      // データをピボット的に整形\n      // { date: '2025-02-22', '12345': 0.5, '23456': 1.2, ... }\n      const pivot = {};\n      json.forEach(item => {\n        const d = item.date;\n        const ch = item.channel_id;\n        const val = item.duration_hour;\n        if (!pivot[d]) {\n          pivot[d] = {\n            date: d\n          };\n        }\n        pivot[d][ch] = val;\n      });\n      // オブジェクト → 配列に変換\n      const pivotArr = Object.values(pivot);\n      setData(pivotArr);\n    }).catch(err => console.error(err));\n  }, []);\n\n  // 全てのchannel_idをキーとして集める\n  const channelIds = new Set();\n  data.forEach(item => {\n    Object.keys(item).forEach(k => {\n      if (k !== \"date\") {\n        channelIds.add(k);\n      }\n    });\n  });\n  const channelKeys = Array.from(channelIds);\n\n  // x軸の日付ラベルで土日を赤字にするには、TickコンポーネントやtickFormatterを使う\n  const renderDateTick = tickProps => {\n    const {\n      x,\n      y,\n      payload\n    } = tickProps;\n    const dateStr = payload.value; // '2025-02-22'\n    const dt = new Date(dateStr);\n    const day = dt.getDay(); // 0=Sunday, 6=Saturday\n    const color = day === 0 || day === 6 ? 'red' : 'black';\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${x},${y})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      x: 0,\n      y: 0,\n      dy: 16,\n      textAnchor: \"middle\",\n      fill: color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, dateStr));\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    width: 600,\n    height: 300,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tick: renderDateTick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }), channelKeys.map((chId, i) => {\n    return /*#__PURE__*/React.createElement(Bar, {\n      key: chId,\n      dataKey: chId,\n      stackId: \"weekly\",\n      fill: \"#\" + (0x1000000 + Math.random() * 0xffffff).toString(16).substr(1, 6) // ランダム色\n      ,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    });\n  })));\n}\nexport default WeeklyUsageChart;","map":{"version":3,"names":["React","useEffect","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","WeeklyUsageChart","data","setData","fetch","then","res","json","pivot","forEach","item","d","date","ch","channel_id","val","duration_hour","pivotArr","Object","values","catch","err","console","error","channelIds","Set","keys","k","add","channelKeys","Array","from","renderDateTick","tickProps","x","y","payload","dateStr","value","dt","Date","day","getDay","color","createElement","transform","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","dy","textAnchor","fill","width","height","strokeDasharray","dataKey","tick","map","chId","i","key","stackId","Math","random","toString","substr"],"sources":["/Users/junwookim/Desktop/StudyBot_discord/discord_study_bot/frontend/src/components/WeeklyUsageChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from \"recharts\";\n\n/*\n  API形式:\n  [\n    {\"date\": \"2025-02-22\", \"channel_id\": 12345, \"duration_hour\": 0.5},\n    ...\n  ]\n  → これを {date, channelA, channelB, ...} という形へ加工して積み上げ棒グラフにする\n*/\nfunction WeeklyUsageChart() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/v1/weekly-usage\")\n      .then((res) => res.json())\n      .then((json) => {\n        // データをピボット的に整形\n        // { date: '2025-02-22', '12345': 0.5, '23456': 1.2, ... }\n        const pivot = {};\n        json.forEach((item) => {\n          const d = item.date;\n          const ch = item.channel_id;\n          const val = item.duration_hour;\n          if (!pivot[d]) {\n            pivot[d] = { date: d };\n          }\n          pivot[d][ch] = val;\n        });\n        // オブジェクト → 配列に変換\n        const pivotArr = Object.values(pivot);\n        setData(pivotArr);\n      })\n      .catch((err) => console.error(err));\n  }, []);\n\n  // 全てのchannel_idをキーとして集める\n  const channelIds = new Set();\n  data.forEach((item) => {\n    Object.keys(item).forEach((k) => {\n      if (k !== \"date\") {\n        channelIds.add(k);\n      }\n    });\n  });\n  const channelKeys = Array.from(channelIds);\n\n  // x軸の日付ラベルで土日を赤字にするには、TickコンポーネントやtickFormatterを使う\n  const renderDateTick = (tickProps) => {\n    const { x, y, payload } = tickProps;\n    const dateStr = payload.value;       // '2025-02-22'\n    const dt = new Date(dateStr);\n    const day = dt.getDay(); // 0=Sunday, 6=Saturday\n    const color = (day === 0 || day === 6) ? 'red' : 'black';\n    return (\n      <g transform={`translate(${x},${y})`}>\n        <text x={0} y={0} dy={16} textAnchor=\"middle\" fill={color}>\n          {dateStr}\n        </text>\n      </g>\n    );\n  };\n\n  return (\n    <div>\n      <BarChart width={600} height={300} data={data}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"date\" tick={renderDateTick} />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        {\n          channelKeys.map((chId, i) => {\n            return (\n              <Bar\n                key={chId}\n                dataKey={chId}\n                stackId=\"weekly\"\n                fill={\"#\" + (0x1000000 + (Math.random())*0xffffff).toString(16).substr(1,6)}  // ランダム色\n              />\n            );\n          })\n        }\n      </BarChart>\n    </div>\n  );\n}\n\nexport default WeeklyUsageChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}