{"ast":null,"code":"var _jsxFileName = \"/Users/junwookim/Desktop/StudyBot_discord/discord_study_bot/frontend/src/components/WeeklyUsageChart.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from \"recharts\";\nimport styled from \"styled-components\";\n\n// チャンネルIDごとの色設定\nconst channelColors = {\n  \"1343562343010926593\": \"#ff7300\",\n  \"1319922411780444175\": \"#ffc658\",\n  \"1343221447681642556\": \"#82ca9d\",\n  \"1345980179146866751\": \"#d884d8\",\n  \"1345980295635275777\": \"#8884d8\"\n};\nconst ChartContainer = styled.div`\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 800px;\n  margin: auto;\n`;\nfunction WeeklyUsageChart() {\n  const [data, setData] = useState([]);\n  const [averageUsage, setAverageUsage] = useState(0);\n  const [channelMapping, setChannelMapping] = useState({}); // channel_name → channel_id のマッピング\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/v1/weekly-usage\", {\n      mode: 'cors'\n    }).then(res => res.json()).then(json => {\n      const today = new Date();\n      const last7Days = [...Array(7)].map((_, i) => {\n        const d = new Date();\n        d.setDate(today.getDate() - (6 - i));\n        return d.toISOString().split(\"T\")[0];\n      });\n      const pivot = {};\n      let totalHours = 0;\n      const channelMap = {};\n      last7Days.forEach(date => {\n        pivot[date] = {\n          date\n        };\n      });\n      json.forEach(item => {\n        const {\n          date,\n          channel_id,\n          channel_name,\n          duration_hour\n        } = item;\n        if (!pivot[date]) pivot[date] = {\n          date\n        };\n        pivot[date][channel_name] = duration_hour;\n        totalHours += duration_hour;\n        channelMap[channel_name] = channel_id;\n      });\n      setAverageUsage(totalHours / 7);\n      setChannelMapping(channelMap);\n      setData(Object.values(pivot));\n    }).catch(err => console.error(err));\n  }, []);\n  const channelNames = new Set();\n  data.forEach(item => {\n    Object.keys(item).forEach(k => {\n      if (k !== \"date\") {\n        channelNames.add(k);\n      }\n    });\n  });\n  const channelKeys = Array.from(channelNames);\n  const renderDateTick = ({\n    x,\n    y,\n    payload\n  }) => {\n    const dateStr = payload.value;\n    const dt = new Date(dateStr);\n    const day = dt.getDay();\n    const color = day === 0 || day === 6 ? 'red' : 'black';\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${x},${y})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      x: 0,\n      y: 0,\n      dy: 16,\n      textAnchor: \"middle\",\n      fill: color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, dateStr));\n  };\n  return /*#__PURE__*/React.createElement(ChartContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, \"\\uD83D\\uDCE6 \\u9031\\u9593\\u30C1\\u30E3\\u30F3\\u30CD\\u30EB\\u4F7F\\u7528\\u6642\\u9593\"), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 350,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    data: data,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 20,\n      bottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tick: renderDateTick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    label: {\n      value: '使用時間 (時間)',\n      angle: -90,\n      position: 'insideLeft'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: averageUsage,\n    stroke: \"red\",\n    strokeDasharray: \"3 3\",\n    label: \"\\u5E73\\u5747\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), channelKeys.map(chName => /*#__PURE__*/React.createElement(Bar, {\n    key: chName,\n    dataKey: chName,\n    stackId: \"weekly\",\n    fill: channelColors[channelMapping[chName]] || \"#cccccc\",\n    animationDuration: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  })))));\n}\nexport default WeeklyUsageChart;","map":{"version":3,"names":["React","useEffect","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ReferenceLine","styled","channelColors","ChartContainer","div","WeeklyUsageChart","data","setData","averageUsage","setAverageUsage","channelMapping","setChannelMapping","fetch","mode","then","res","json","today","Date","last7Days","Array","map","_","i","d","setDate","getDate","toISOString","split","pivot","totalHours","channelMap","forEach","date","item","channel_id","channel_name","duration_hour","Object","values","catch","err","console","error","channelNames","Set","keys","k","add","channelKeys","from","renderDateTick","x","y","payload","dateStr","value","dt","day","getDay","color","createElement","transform","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","dy","textAnchor","fill","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","tick","label","angle","position","stroke","chName","key","stackId","animationDuration"],"sources":["/Users/junwookim/Desktop/StudyBot_discord/discord_study_bot/frontend/src/components/WeeklyUsageChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine \n} from \"recharts\";\nimport styled from \"styled-components\";\n\n// チャンネルIDごとの色設定\nconst channelColors = {\n  \"1343562343010926593\": \"#ff7300\",\n  \"1319922411780444175\": \"#ffc658\",\n  \"1343221447681642556\": \"#82ca9d\",\n  \"1345980179146866751\": \"#d884d8\",\n  \"1345980295635275777\": \"#8884d8\",\n};\n\nconst ChartContainer = styled.div`\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 800px;\n  margin: auto;\n`;\n\nfunction WeeklyUsageChart() {\n  const [data, setData] = useState([]);\n  const [averageUsage, setAverageUsage] = useState(0);\n  const [channelMapping, setChannelMapping] = useState({}); // channel_name → channel_id のマッピング\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/v1/weekly-usage\", { mode: 'cors' })\n      .then((res) => res.json())\n      .then((json) => {\n        const today = new Date();\n        const last7Days = [...Array(7)].map((_, i) => {\n          const d = new Date();\n          d.setDate(today.getDate() - (6 - i));\n          return d.toISOString().split(\"T\")[0];\n        });\n\n        const pivot = {};\n        let totalHours = 0;\n        const channelMap = {};\n\n        last7Days.forEach(date => {\n          pivot[date] = { date };\n        });\n\n        json.forEach((item) => {\n          const { date, channel_id, channel_name, duration_hour } = item;\n          \n          if (!pivot[date]) pivot[date] = { date };\n\n          pivot[date][channel_name] = duration_hour;\n          totalHours += duration_hour;\n\n          channelMap[channel_name] = channel_id;\n        });\n\n        setAverageUsage(totalHours / 7);\n        setChannelMapping(channelMap);\n        setData(Object.values(pivot));\n      })\n      .catch((err) => console.error(err));\n  }, []);\n\n  const channelNames = new Set();\n  data.forEach((item) => {\n    Object.keys(item).forEach((k) => {\n      if (k !== \"date\") {\n        channelNames.add(k);\n      }\n    });\n  });\n  const channelKeys = Array.from(channelNames);\n\n  const renderDateTick = ({ x, y, payload }) => {\n    const dateStr = payload.value;\n    const dt = new Date(dateStr);\n    const day = dt.getDay();\n    const color = (day === 0 || day === 6) ? 'red' : 'black';\n\n    return (\n      <g transform={`translate(${x},${y})`}>\n        <text x={0} y={0} dy={16} textAnchor=\"middle\" fill={color}>\n          {dateStr}\n        </text>\n      </g>\n    );\n  };\n\n  return (\n    <ChartContainer>\n      <h3>📦 週間チャンネル使用時間</h3>\n      <ResponsiveContainer width=\"100%\" height={350}>\n        <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" tick={renderDateTick} />\n          <YAxis label={{ value: '使用時間 (時間)', angle: -90, position: 'insideLeft' }} />\n          <Tooltip />\n          <Legend />\n          <ReferenceLine y={averageUsage} stroke=\"red\" strokeDasharray=\"3 3\" label=\"平均\" />\n\n          {channelKeys.map((chName) => (\n            <Bar\n              key={chName}\n              dataKey={chName}\n              stackId=\"weekly\"\n              fill={channelColors[channelMapping[chName]] || \"#cccccc\"}\n              animationDuration={800}\n            />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    </ChartContainer>\n  );\n}\n\nexport default WeeklyUsageChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}