{"ast":null,"code":"var _jsxFileName = \"/Users/junwookim/Desktop/StudyBot_discord/discord_study_bot/frontend/src/components/WeeklyUsageChart.jsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine } from \"recharts\";\nimport styled from \"styled-components\";\n\n// 固定のチャンネルごとの色マップ\nconst channelColors = {\n  \"1343562343010926593\": \"#ff7300\",\n  \"1319922411780444175\": \"#ffc658\",\n  \"1343221447681642556\": \"#82ca9d\",\n  \"1345980179146866751\": \"#d884d8\",\n  \"1345980295635275777\": \"#8884d8\"\n};\n\n// チャンネルIDの名前を取得する関数（API側で変更があった場合も対応しやすく）\nconst getChannelName = channelId => {\n  return channelId in channelColors ? channelId : `チャンネル${channelId}`;\n};\nconst ChartContainer = styled.div`\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 800px;\n  margin: auto;\n`;\nfunction WeeklyUsageChart() {\n  const [data, setData] = useState([]);\n  const [averageUsage, setAverageUsage] = useState(0);\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/v1/weekly-usage\", {\n      mode: 'cors'\n    }).then(res => res.json()).then(json => {\n      const pivot = {};\n      let totalHours = 0;\n      let totalDays = new Set();\n      json.forEach(item => {\n        const d = item.date;\n        const ch = getChannelName(item.channel_id);\n        const val = item.duration_hour;\n        if (!pivot[d]) {\n          pivot[d] = {\n            date: d\n          };\n        }\n        pivot[d][ch] = val;\n        totalHours += val;\n        totalDays.add(d);\n      });\n      setAverageUsage(totalHours / totalDays.size);\n      setData(Object.values(pivot));\n    }).catch(err => console.error(err));\n  }, []);\n  const channelIds = new Set();\n  data.forEach(item => {\n    Object.keys(item).forEach(k => {\n      if (k !== \"date\") {\n        channelIds.add(k);\n      }\n    });\n  });\n  const channelKeys = Array.from(channelIds);\n  const renderDateTick = ({\n    x,\n    y,\n    payload\n  }) => {\n    const dateStr = payload.value;\n    const dt = new Date(dateStr);\n    const day = dt.getDay();\n    const color = day === 0 || day === 6 ? 'red' : 'black';\n    return /*#__PURE__*/React.createElement(\"g\", {\n      transform: `translate(${x},${y})`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"text\", {\n      x: 0,\n      y: 0,\n      dy: 16,\n      textAnchor: \"middle\",\n      fill: color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }, dateStr));\n  };\n  return /*#__PURE__*/React.createElement(ChartContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, \"\\uD83D\\uDCCA \\u9031\\u9593\\u30C1\\u30E3\\u30F3\\u30CD\\u30EB\\u4F7F\\u7528\\u6642\\u9593\"), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 350,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    data: data,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 20,\n      bottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    tick: renderDateTick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    label: {\n      value: '使用時間 (時間)',\n      angle: -90,\n      position: 'insideLeft'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ReferenceLine, {\n    y: averageUsage,\n    stroke: \"red\",\n    strokeDasharray: \"3 3\",\n    label: \"\\u5E73\\u5747\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }), channelKeys.map(chId => /*#__PURE__*/React.createElement(Bar, {\n    key: chId,\n    dataKey: chId,\n    stackId: \"weekly\",\n    fill: channelColors[chId] || \"#cccccc\",\n    animationDuration: 800,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  })))));\n}\nexport default WeeklyUsageChart;","map":{"version":3,"names":["React","useEffect","useState","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","ReferenceLine","styled","channelColors","getChannelName","channelId","ChartContainer","div","WeeklyUsageChart","data","setData","averageUsage","setAverageUsage","fetch","mode","then","res","json","pivot","totalHours","totalDays","Set","forEach","item","d","date","ch","channel_id","val","duration_hour","add","size","Object","values","catch","err","console","error","channelIds","keys","k","channelKeys","Array","from","renderDateTick","x","y","payload","dateStr","value","dt","Date","day","getDay","color","createElement","transform","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","dy","textAnchor","fill","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","tick","label","angle","position","stroke","map","chId","key","stackId","animationDuration"],"sources":["/Users/junwookim/Desktop/StudyBot_discord/discord_study_bot/frontend/src/components/WeeklyUsageChart.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { \n  BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, ReferenceLine \n} from \"recharts\";\nimport styled from \"styled-components\";\n\n// 固定のチャンネルごとの色マップ\nconst channelColors = {\n    \"1343562343010926593\": \"#ff7300\",\n    \"1319922411780444175\": \"#ffc658\",\n    \"1343221447681642556\": \"#82ca9d\",\n    \"1345980179146866751\": \"#d884d8\",\n  \"1345980295635275777\": \"#8884d8\"\n};\n\n// チャンネルIDの名前を取得する関数（API側で変更があった場合も対応しやすく）\nconst getChannelName = (channelId) => {\n  return channelId in channelColors ? channelId : `チャンネル${channelId}`;\n};\n\nconst ChartContainer = styled.div`\n  background: white;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  width: 100%;\n  max-width: 800px;\n  margin: auto;\n`;\n\nfunction WeeklyUsageChart() {\n  const [data, setData] = useState([]);\n  const [averageUsage, setAverageUsage] = useState(0);\n\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/v1/weekly-usage\", { mode: 'cors' })\n      .then((res) => res.json())\n      .then((json) => {\n        const pivot = {};\n        let totalHours = 0;\n        let totalDays = new Set();\n\n        json.forEach((item) => {\n          const d = item.date;\n          const ch = getChannelName(item.channel_id);\n          const val = item.duration_hour;\n\n          if (!pivot[d]) {\n            pivot[d] = { date: d };\n          }\n          pivot[d][ch] = val;\n          totalHours += val;\n          totalDays.add(d);\n        });\n\n        setAverageUsage(totalHours / totalDays.size);\n        setData(Object.values(pivot));\n      })\n      .catch((err) => console.error(err));\n  }, []);\n\n  const channelIds = new Set();\n  data.forEach((item) => {\n    Object.keys(item).forEach((k) => {\n      if (k !== \"date\") {\n        channelIds.add(k);\n      }\n    });\n  });\n  const channelKeys = Array.from(channelIds);\n\n  const renderDateTick = ({ x, y, payload }) => {\n    const dateStr = payload.value;\n    const dt = new Date(dateStr);\n    const day = dt.getDay();\n    const color = (day === 0 || day === 6) ? 'red' : 'black';\n\n    return (\n      <g transform={`translate(${x},${y})`}>\n        <text x={0} y={0} dy={16} textAnchor=\"middle\" fill={color}>\n          {dateStr}\n        </text>\n      </g>\n    );\n  };\n\n  return (\n    <ChartContainer>\n      <h3>📊 週間チャンネル使用時間</h3>\n      <ResponsiveContainer width=\"100%\" height={350}>\n        <BarChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 10 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" tick={renderDateTick} />\n          <YAxis label={{ value: '使用時間 (時間)', angle: -90, position: 'insideLeft' }} />\n          <Tooltip />\n          <Legend />\n\n          {/* 平均使用時間のライン */}\n          <ReferenceLine y={averageUsage} stroke=\"red\" strokeDasharray=\"3 3\" label=\"平均\" />\n\n          {/* 積み上げ棒グラフ */}\n          {channelKeys.map((chId) => (\n            <Bar\n              key={chId}\n              dataKey={chId}\n              stackId=\"weekly\"\n              fill={channelColors[chId] || \"#cccccc\"}\n              animationDuration={800}\n            />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    </ChartContainer>\n  );\n}\n\nexport default WeeklyUsageChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}